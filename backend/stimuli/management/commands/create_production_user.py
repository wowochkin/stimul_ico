from django.core.management.base import BaseCommand
from django.contrib.auth.models import User, Group
from django.contrib.auth.hashers import make_password
from staffing.models import Division, Position
from stimuli.models import UserDivision, Employee


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (–±–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--username',
            type=str,
            required=True,
            help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        )
        parser.add_argument(
            '--password',
            type=str,
            required=True,
            help='–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        )
        parser.add_argument(
            '--first-name',
            type=str,
            required=True,
            help='–ò–º—è',
        )
        parser.add_argument(
            '--last-name',
            type=str,
            required=True,
            help='–§–∞–º–∏–ª–∏—è',
        )
        parser.add_argument(
            '--email',
            type=str,
            required=True,
            help='Email',
        )
        parser.add_argument(
            '--role',
            type=str,
            choices=['manager', 'employee'],
            required=True,
            help='–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (manager –∏–ª–∏ employee)',
        )
        parser.add_argument(
            '--division',
            type=str,
            help='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π)',
        )
        parser.add_argument(
            '--position',
            type=str,
            help='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏',
        )

    def handle(self, *args, **options):
        username = options['username']
        password = options['password']
        first_name = options['first_name']
        last_name = options['last_name']
        email = options['email']
        role = options['role']
        division_name = options.get('division')
        position_name = options.get('position')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if User.objects.filter(username=username).exists():
            self.stdout.write(
                self.style.ERROR(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã
        try:
            manager_group = Group.objects.get(name='–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞')
            employee_group = Group.objects.get(name='–°–æ—Ç—Ä—É–¥–Ω–∏–∫')
        except Group.DoesNotExist:
            self.stdout.write(
                self.style.ERROR('–ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py init_permissions')
            )
            return

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.create_user(
            username=username,
            first_name=first_name,
            last_name=last_name,
            email=email,
            password=password,
            is_active=True,
        )

        if role == 'manager':
            user.groups.add(manager_group)
            
            if not division_name:
                self.stdout.write(
                    self.style.ERROR('–î–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ!')
                )
                user.delete()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            division, created = Division.objects.get_or_create(name=division_name)
            if created:
                self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {division_name}')
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
            UserDivision.objects.create(user=user, division=division)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            if position_name:
                position, created = Position.objects.get_or_create(
                    name=position_name,
                    defaults={'base_salary': 100000}
                )
                if created:
                    self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position_name}')
            else:
                position, created = Position.objects.get_or_create(
                    name='–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
                    defaults={'base_salary': 150000}
                )
            
            Employee.objects.create(
                user=user,
                full_name=f'{first_name} {last_name}',
                division=division,
                position=position,
                category=Employee.Category.AUP
            )
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úì –°–æ–∑–¥–∞–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞: {username}')
            )
            
        else:  # employee
            user.groups.add(employee_group)
            
            if not division_name:
                self.stdout.write(
                    self.style.ERROR('–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ!')
                )
                user.delete()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            division, created = Division.objects.get_or_create(name=division_name)
            if created:
                self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {division_name}')
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            if position_name:
                position, created = Position.objects.get_or_create(
                    name=position_name,
                    defaults={'base_salary': 80000}
                )
                if created:
                    self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position_name}')
            else:
                position, created = Position.objects.get_or_create(
                    name='–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
                    defaults={'base_salary': 80000}
                )
            
            Employee.objects.create(
                user=user,
                full_name=f'{first_name} {last_name}',
                division=division,
                position=position,
                category=Employee.Category.PPS
            )
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úì –°–æ–∑–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {username}')
            )

        self.stdout.write(f'\nüìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
        self.stdout.write(f'–†–æ–ª—å: {"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞" if role == "manager" else "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"}')
        self.stdout.write(f'–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {division_name}')
        if position_name:
            self.stdout.write(f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position_name}')
