from django.core.management.base import BaseCommand
from django.core.management import call_command
import os
from pathlib import Path


class Command(BaseCommand):
    help = '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--output',
            type=str,
            default='data_export.json',
            help='–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data_export.json)'
        )
        parser.add_argument(
            '--app',
            type=str,
            action='append',
            help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑)'
        )

    def handle(self, *args, **options):
        output_file = options['output']
        apps = options.get('app', [])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–∫—Å—Ç—É—Ä
        fixtures_dir = Path('fixtures')
        fixtures_dir.mkdir(exist_ok=True)
        
        output_path = fixtures_dir / output_file
        
        self.stdout.write('üì¶ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...')
        
        try:
            if apps:
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                for app in apps:
                    self.stdout.write(f'üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {app}')
                    app_output = fixtures_dir / f'{app}_data.json'
                    call_command('dumpdata', app, output=app_output, indent=2)
                    self.stdout.write(self.style.SUCCESS(f'‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ {app} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {app_output}'))
            else:
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                call_command('dumpdata', output=output_path, indent=2, exclude=['contenttypes', 'auth.permission'])
                self.stdout.write(self.style.SUCCESS(f'‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_path}'))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = output_path.stat().st_size if output_path.exists() else 0
            self.stdout.write(f'üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024:.1f} KB')
            
            self.stdout.write('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–º–ø–æ—Ä—Ç—É:')
            self.stdout.write('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª —Ñ–∏–∫—Å—Ç—É—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä')
            self.stdout.write('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py loaddata fixtures/data_export.json')
            self.stdout.write('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –∞–¥–º–∏–Ω–∫–µ Django')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}')
            )
            return
        
        self.stdout.write(self.style.SUCCESS('\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!'))
