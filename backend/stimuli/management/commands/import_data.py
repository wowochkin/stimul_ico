from django.core.management.base import BaseCommand
from django.core.management import call_command
from pathlib import Path


class Command(BaseCommand):
    help = '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            'fixture_file',
            type=str,
            help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞'
        )
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞'
        )

    def handle(self, *args, **options):
        fixture_file = options['fixture_file']
        clear_data = options['clear']
        dry_run = options['dry_run']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        fixture_path = Path(fixture_file)
        if not fixture_path.exists():
            self.stdout.write(
                self.style.ERROR(f'‚ùå –§–∞–π–ª {fixture_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            )
            return
        
        self.stdout.write('üì¶ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...')
        
        if dry_run:
            self.stdout.write(self.style.WARNING('üîç [DRY RUN] –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'))
            # –í dry-run —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_size = fixture_path.stat().st_size
            self.stdout.write(f'üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024:.1f} KB')
            self.stdout.write(f'üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {fixture_path.absolute()}')
            self.stdout.write('‚úÖ Dry-run –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —É–±–µ—Ä–∏—Ç–µ —Ñ–ª–∞–≥ --dry-run')
            return
        
        try:
            if clear_data:
                self.stdout.write('üóëÔ∏è  –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...')
                call_command('flush', '--noinput')
                self.stdout.write(self.style.WARNING('‚ö†Ô∏è  –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!'))
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            self.stdout.write(f'üì§ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {fixture_file}...')
            call_command('loaddata', fixture_file)
            
            self.stdout.write(self.style.SUCCESS('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!'))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stdout.write('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:')
            self.stdout.write('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –∞–¥–º–∏–Ω–∫–µ Django –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:')
            self.stdout.write('python manage.py shell -c "from staffing.models import Division, Position; print(f\'–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π: {Division.objects.count()}, –î–æ–ª–∂–Ω–æ—Å—Ç–µ–π: {Position.objects.count()}\')"')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}')
            )
            return
        
        self.stdout.write(self.style.SUCCESS('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!'))
